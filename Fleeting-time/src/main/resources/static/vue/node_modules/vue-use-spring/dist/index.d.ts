import { MaybeRefOrGetter, UnwrapRef } from 'vue-demi';

interface SpringConfig {
    /**
     * Mass of the spring
     */
    mass?: number;
    /**
     * Spring energetic load. Also called stiffness
     */
    tension: number;
    /**
     * Spring resistance.
     */
    friction: number;
    /**
     * The higher the precision, the more smooth and slow to compute the animation
     * will be. By default 0.01 is a good value, but can be decreased to 0.1 in
     * some scenarios for performance.
     */
    precision?: number;
}
declare const noWobble: SpringConfig;
declare const gentle: SpringConfig;
declare const wobbly: SpringConfig;
declare const stiff: SpringConfig;
declare const presets: {
    noWobble: SpringConfig;
    gentle: SpringConfig;
    wobbly: SpringConfig;
    stiff: SpringConfig;
};

type NumericalValues = Record<string, number> | number[];
type SpringValue = NumericalValues;
/**
 * Returns an object with the same shape as initialValue but that interpolates
 * its value when set instead of directly changing.
 *
 * @example
 * ```js
 *   const position = useSpring({ x: 0, y: 100 })
 *   position.x = 100
 *   position.x // 0
 *   await delay(300) // wait some time
 *   // the position.x automatically increases until it reaches 100
 *   position.x // 70
 * ```
 *
 * @param initialValue - initial value of the spring controlled variable
 * @param springConfiguration - Spring properties. Can be a Ref or Computed
 * @param options - Optional options
 */
declare function useSpring<T extends MaybeRefOrGetter<SpringValue>>(initialValue: T, springConfiguration?: MaybeRefOrGetter<SpringConfig>, options?: {
    onRest?: () => any;
}): UnwrapRef<T>;

interface SpringGroupProps {
    config?: SpringConfig;
    tag?: string;
}
declare const SpringGroup: new () => {
    $props: SpringGroupProps;
};

export { type SpringConfig, SpringGroup, gentle, noWobble, presets, stiff, useSpring, wobbly };
